#!/bin/python

use_multiple_tpgs = False

# List of interfaces
iface_map = {
    # The master machine is being dual purposed as a PXE server. This removes
    # the need for the compute machines and the storage machines to have
    # dedicated boot disks.
    'master0': {
        'vlan_9000': '192.168.2.1'
    },

    # The storage machines can have multiple network interfaces for iSCSI
    # traffic. They are required to be on different IP networks to reduce
    # network frame congestion.
    'storage0': {
        'vlan_san00': '192.168.3.20',
        'vlan_san01': '192.168.4.20',
        'vlan_san02': '192.168.5.20',
        'vlan_san03': '192.168.6.20',
    },

    # You can have multiple storage machines and store different sets of
    # volumes on it. The compute machines can log into all the storage
    # machines so virtual machines are able to use volumes from any
    # storage machines.
    'storage1': {
        'vlan_san00': '192.168.3.30',
        'vlan_san01': '192.168.4.30',
        'vlan_san02': '192.168.5.30',
        'vlan_san03': '192.168.6.30',
    }
}

# List of iSCSI clients (aka initiators)
initiators = {
    'hyper0': [
        # SAN client
        {
            'iqn':'iqn.2005-03.org.open-iscsi:00000000000',

            # 'managed' indicates if this client will attempt to log into the
            # the storage server when 'pce-initiator login' command is issued.
            # For SAN clients, this value should be set to true so the admin
            # can log in and out using the 'pce-initiator' script. For PXE
            # clients, this value should be set to false because the login
            # must be controlled by a script in initramfs.
            'managed': True,
            'userid':'secret1',
            'password':'secret2',
            'in_userid':'secret3',
            'in_password':'secret4',
            'targets': [
                { 'hostname': 'storage0', 'ifaces': [ 'vlan_san00', 'vlan_san02' ] },
                { 'hostname': 'storage1', 'ifaces': [ 'vlan_san00', 'vlan_san02' ] }
            ],
        },
        # PXE client
        {
            'iqn':'iqn.2005-03.org.open-iscsi:111111111111',
            'managed': False,
            'userid':'secret9',
            'password':'secret10',
            'in_userid':'secret11',
            'in_password':'secret12',
            'targets': [
                { 'hostname': 'master0', 'ifaces': ['vlan1'] }
            ] 
        }
    ],

    'hyper1': [
        # SAN client
        {
            'iqn':'iqn.2005-03.org.open-iscsi:222222222222',
            'managed': True,
            'userid':'secret5',
            'password':'secret6',
            'in_userid':'secret7',
            'in_password':'secret8',
            'targets': [
                { 'hostname': 'storage0', 'ifaces': [ 'vlan_san01', 'vlan_san03' ] },
                { 'hostname': 'storage1', 'ifaces': [ 'vlan_san01', 'vlan_san03' ] }
            ]
        },

        # PXE client
        {
            'iqn':'iqn.2005-03.org.open-iscsi:333333333333',
            'managed': False,
            'userid':'secret9',
            'password':'secret10',
            'in_userid':'secret13',
            'in_password':'secret14',
            'targets': [
                { 'hostname': 'master0', 'ifaces': ['vlan1'] }
            ]
        }
    ],

    'storage0': [
        # PXE client
        {
            'iqn':'iqn.2005-03.org.open-iscsi:444444444444',
            'managed': False,
            'userid':'secret9',
            'password':'secret10',
            'in_userid':'secret15',
            'in_password':'secret16',
            'targets': [
                { 'hostname': 'master0', 'ifaces': ['vlan1'] }
            ]
        }
    ],

    'storage1': [
        # PXE client
        {
            'iqn':'iqn.2005-03.org.open-iscsi:444444444444',
            'managed': False,
            'userid':'secret9',
            'password':'secret10',
            'in_userid':'secret17',
            'in_password':'secret18',
            'targets': [
                { 'hostname': 'master0', 'ifaces': ['vlan1'] }
            ]
        }
    ],
}

targets = {
    # storage 0
    'storage0': {
        'iqn': 'iqn.2003-01.org.linux-iscsi.storage0.x8664:sn.555555555555',
        'backstore_path': '/mnt/storage0',
        'ifaces': [
            'vlan_san00', 'vlan_san01', 'vlan_san02', 'vlan_san03'
        ],
        'disks': {
                            ##############
                            # ROM images #
                            ##############

            "arch-setup": {
                'size': "1MB",             # Dummy size
                'type': 'disk',

                # 'bootOrder' is an optional field to indicate whether this
                # volume should be considered as a bootable disk. KVM will
                # attempt to boot with the lowest bootOrder index first and
                # work its way up to higher indicies.
                'bootOrder': 0,

                # 'instance' is an optional field to indicate which virtual
                # machine this volume will be attached to.
                #'instance': 'guest0',      # Uncomment to attach
            },

                            ##################
                            # VM boot images #
                            ##################

            "disk0": {
                'size': "32GB",
                'instance': 'guest0',
                'type': 'disk',
                'bootOrder': 1
            },
            "disk1": {
                'size': "10GB",
                'instance': 'guest1',
                'type': 'disk',
                'bootOrder': 1
            },
            "disk2": {
                'size': "10GB",
                'instance': 'guest2',
                'type': 'disk',
                'bootOrder': 1
            },

                            ################
                            # Data volumes #
                            ################

            "disk3": {
                'size': "200GB",
                'instance': 'guest1',
                'type': 'disk',
            },


                            ##############
                            # Swap disks #
                            ##############

            # Swap disks for hypervisors
            "hyper0-swap0": {
                'size': "24GB",
                'type': 'disk'
            },

            "hyper1-swap0": {
                'size': "24GB",
                'type': 'disk'
            },
        }
    },

    # storage 1
    'storage1': {
        'iqn': 'iqn.2003-01.org.linux-iscsi.storage1.x8664:sn.666666666666',
        'backstore_path': '/mnt/storage1',
        'ifaces': [
            'vlan_san00', 'vlan_san01', 'vlan_san02', 'vlan_san03',
        ],
        'disks': {
        }
    },

    # master (PXE server)
    'master0': {
        'iqn': 'iqn.2003-01.org.linux-iscsi.master0.x8664:sn.777777777777',
        'ifaces': [
            'vlan_9000'
        ],
        'disks': {
            'hyper0': { 'size': '12GB' },
            'hyper1': { 'size': '12GB' },
            'storage0': { 'size': '12GB' },
            'storage1': { 'size': '12GB' }
        }
    }

}

# Hostnames of Compute Machines
computeNodes = [
    'hyper0',
    'hyper1'
]

computeInstances = {
    'guest0': {
        'title': 'Example Machine #1',

        # 'maxMemory' indicates the maximum amount of memory (in MB) that can
        # be reserved for the guest. The guest kernel must have the balloon
        # driver loaded to allow the guest kernel to absorb memory from
        # the host at runtime. For the time being, PCE does not provide a
        # way to resize the guest memory; the admin may do so by using the
        # libvirt API.
        'maxMemory': 4096,

        # 'baseMemory' indicates the minimum amount of memory that is reserved
        # for the guest. This can be set to the same value as the 'maxMemory'
        # field, in which case memory ballooning will not have any effect.
        'baseMemory': 2048,
        'cpuCount': 4,

        # Multiple network interfaces can be added to the guest. If a 'mac'
        # address is specified, it will be used during the creation of the
        # network interface. If it's not specified (with a value of None),
        # an auto-generated MAC address will be used.
        'networks': [
            { 'iface': 'br_dmz',  'mac': None },
            { 'iface': 'br_cmz',  'mac': None },
        ]
    },

    'guest1': {
        'title': 'Example Machine #2',
        'maxMemory': 1024,
        'baseMemory': 1024,
        'cpuCount': 8,
        'networks': [
            { 'iface': 'br_prod', 'mac': '52:54:00:c2:00:00' },
        ]
    },

    'guest2': {
        'title': 'Example Machine #3',
        'maxMemory': 1024,
        'baseMemory': 1024,
        'cpuCount': 8,
        'networks': [
            { 'iface': 'br_prod', 'mac': None },
        ]
    },
}



